<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>韩朔的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hans2936.github.io/"/>
  <updated>2018-06-20T01:42:03.869Z</updated>
  <id>https://hans2936.github.io/</id>
  
  <author>
    <name>韩朔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>欧洲行</title>
    <link href="https://hans2936.github.io/2018/06/19/EuroTrip/"/>
    <id>https://hans2936.github.io/2018/06/19/EuroTrip/</id>
    <published>2018-06-18T23:55:42.000Z</published>
    <updated>2018-06-20T01:42:03.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="慕尼黑-汉堡-巴黎-柏林"><a href="#慕尼黑-汉堡-巴黎-柏林" class="headerlink" title="慕尼黑-汉堡-巴黎-柏林"></a>慕尼黑-汉堡-巴黎-柏林</h2><p>四月-五月春游，开心。<br><img src="/2018/06/19/EuroTrip/Hohenschwangau.jpg" alt="在新天鹅堡看高天鹅堡"><br><a id="more"></a></p><p>视频：<br><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://cncdn.miaopai.com/stream/xobPJ34xqucdlTxajVVazI3gd9736jArsPyODQ___32.mp4?ssig=32bcbcd0b3523aa6187ad9ddd0110d92&time_stamp=1529462280183","pic":"https://hans2936.github.io/2018/06/19/EuroTrip/Hohenschwangau.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;慕尼黑-汉堡-巴黎-柏林&quot;&gt;&lt;a href=&quot;#慕尼黑-汉堡-巴黎-柏林&quot; class=&quot;headerlink&quot; title=&quot;慕尼黑-汉堡-巴黎-柏林&quot;&gt;&lt;/a&gt;慕尼黑-汉堡-巴黎-柏林&lt;/h2&gt;&lt;p&gt;四月-五月春游，开心。&lt;br&gt;&lt;img src=&quot;/2018/06/19/EuroTrip/Hohenschwangau.jpg&quot; alt=&quot;在新天鹅堡看高天鹅堡&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="旅行" scheme="https://hans2936.github.io/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="旅行" scheme="https://hans2936.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 进阶：移植 NexT 主题的本地搜索到 Landscape 主题</title>
    <link href="https://hans2936.github.io/2018/06/15/HexoSearch/"/>
    <id>https://hans2936.github.io/2018/06/15/HexoSearch/</id>
    <published>2018-06-14T23:55:42.000Z</published>
    <updated>2018-06-19T00:02:56.843Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 默认的 Landscape 主题其实已经很好了，可以说简明美观，网页上的元素也不难添加。<br>但是美中不足的就是用了谷歌搜索引擎，谷歌在国内打不开就不说了，而且用外部搜索引擎本来也不如站内搜索便捷实用。<br>后来我发现 NexT 主题是有站内搜索功能的，就试着把这个功能移植了进来。</p><h2 id="本地搜索的原理"><a href="#本地搜索的原理" class="headerlink" title="本地搜索的原理"></a>本地搜索的原理</h2><p>对于动态网站来说，本地搜索不是很困难，可以通过 php 实现（具体见<a href="https://www.jianshu.com/p/2ff5e11e849c" target="_blank" rel="noopener">这篇文章</a>）。<br>但是，GitHub博客是静态网站，用不了 php，导致我最后只能把google搜索结果页内置到了网站里面 （Landscape也用了谷歌）。</p><p>NexT 主题实现这个功能，用了 Hexo 的拓展包 <code>hexo-generator-searchdb</code>，它预先生成了一个文本库<code>search.xml</code>，然后传到了网站里面 。在本地搜索的时候，NexT直接用javascript调用了这个文件，从而实现了静态网站的本地搜索。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先把产生文本库的包安装好，执行 <code>npm install hexo-generator-searchdb --save</code>。<br>然后在主配置文件 <code>_config.yml</code>里面加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><p>并且在主题配置文件加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure></p><p>其中<code>trigger</code>表示搜索结果会不会打字时自动显示，<code>top_n_per_article</code> 表示每篇文章最多显示几条结果（-1为不限数字）。<br>这些只是准备工作，在把代码放到Landscape 之前，这些设置不会起任何作用。</p><h2 id="NexT-主题的本地搜索代码"><a href="#NexT-主题的本地搜索代码" class="headerlink" title="NexT 主题的本地搜索代码"></a>NexT 主题的本地搜索代码</h2><p>NexT 主题的 local-search 主要是下面几个模块组成的：</p><ul><li>核心javascript脚本：<a href="https://github.com/iissnan/hexo-theme-next/blob/master/layout/_third-party/search/localsearch.swig" target="_blank" rel="noopener">localsearch.swig</a></li><li>css配置文件：<a href="https://github.com/iissnan/hexo-theme-next/blob/master/source/css/_common/components/third-party/localsearch.styl" target="_blank" rel="noopener">localsearch.styl</a></li><li>搜索框：<a href="https://github.com/iissnan/hexo-theme-next/blob/master/layout/_partials/search/localsearch.swig" target="_blank" rel="noopener">另一个localsearch.swig</a></li><li>在header中添加链接：<a href="https://github.com/iissnan/hexo-theme-next/blob/master/layout/_partials/header.swig" target="_blank" rel="noopener">header.swig</a></li></ul><p>Landscape主题的后缀有所不同（不是.swig， 而是.ejs），这几个文件copy过来之后需要稍微改一下语法，几个图标也需要重新定义，细节如下。</p><h2 id="移植步骤"><a href="#移植步骤" class="headerlink" title="移植步骤"></a>移植步骤</h2><h3 id="定义”搜索”，”关闭”，”无结果”等图标"><a href="#定义”搜索”，”关闭”，”无结果”等图标" class="headerlink" title="定义”搜索”，”关闭”，”无结果”等图标"></a>定义”搜索”，”关闭”，”无结果”等图标</h3><p>NexT 大量使用了 <code>&lt;i class = &quot;fa abc&quot;&gt; &lt;/i&gt;</code> 这样的方式来引用 FontAwesome 图标，但是 Landscape 却不支持这么用。<br>所以一开始不得不定义一些图标，在主题文件夹 <code>themes/landscape/</code> 的 <code>/source/css/</code> 下面找个地方 （比如说<code>_partial/header.styl</code>），定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#icon-close:before &#123;</span><br><span class="line">  font-family: FontAwesome;</span><br><span class="line">  content: &quot;\f146&quot;;</span><br><span class="line">  font-size: x-large</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就定义了一个关闭搜索框的图标。移植的时候重新定义图标为<code>&lt;span id=&quot;icon-close&quot;&gt;&lt;/span&gt;</code> 就可以了。<br>新定义的图标主要是搜索 <code>\f002</code>，关闭<code>\f146</code>，和无结果 <code>\f119</code>。</p><h3 id="放入调出搜索框的链接"><a href="#放入调出搜索框的链接" class="headerlink" title="放入调出搜索框的链接"></a>放入调出搜索框的链接</h3><p>首先进入主题文件夹的<code>/layout/_partial/header.ejs</code> ，那里默认有一个搜索链接（<code>id=&quot;nav-search-btn&quot; class=&quot;nav-icon&quot;</code>）。<br>把这个链接扩展为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(!theme.local_search.enable) &#123; %&gt;&lt;a id=&quot;nav-search-btn&quot; class=&quot;nav-icon&quot; title=&quot;&lt;%= __(&apos;search&apos;) %&gt;&quot;&gt;&lt;/a&gt;&lt;% &#125; %&gt;</span><br><span class="line">&lt;% if(theme.local_search.enable) &#123; %&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;popup-trigger nav-icon&quot; id=&quot;nav-search-btn&quot;&gt;&lt;/a&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>这也就意味着用主题配置中的 <code>local_search.enable</code> 来控制搜索功能了，打开本地搜索的情况下，搜索链接会启动<code>class=&quot;popup-trigger&quot;</code>，也就打开了本地搜索引擎。</p><h3 id="放入搜索框"><a href="#放入搜索框" class="headerlink" title="放入搜索框"></a>放入搜索框</h3><p>还是着刚才的文件<code>header.ejs</code>，可以在最后一行<code>&lt;/header&gt;</code>前面加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.local_search.enable) &#123; %&gt;&lt;div class=&quot;local-search-inner&quot;&gt;&lt;%- partial(&apos;search&apos;) %&gt;&lt;/div&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>其中 <code>&lt;%- partial(&#39;search&#39;) %&gt;</code> 指向了 <code>search.ejs</code>，这个文件也就是 NexT 的搜索框<a href="https://github.com/iissnan/hexo-theme-next/blob/master/layout/_partials/search/localsearch.swig" target="_blank" rel="noopener">另一个localsearch.swig</a>了。<br>把它拷贝成<code>search.ejs</code> 跟 <code>header.ejs</code> 放在一起，但是图标要全部换成适配Landscape的定义。另外直接明码写上<code>placeholder=&quot; 本地搜索...&quot;</code> 就可以了。</p><h3 id="放入核心-javascript"><a href="#放入核心-javascript" class="headerlink" title="放入核心 javascript"></a>放入核心 javascript</h3><p>把<a href="https://github.com/iissnan/hexo-theme-next/blob/master/layout/_third-party/search/localsearch.swig" target="_blank" rel="noopener">localsearch.swig</a>放入<code>/layout/_partial/</code>, 并且命名为<code>localsearch.ejs</code>。<br>然后在<code>/layout/layout.ejs</code>的最后，<code>&lt;/body&gt;</code> 的上一行引用这个文件 <code>&lt;%- partial(&#39;_partial/localsearch&#39;) %&gt;</code>。<br>这个目的是在每一个网页的最下方加入这一段 javascript。</p><p>然后就要改这个文件了， 要改的有三项：</p><ul><li>图标<br>跟刚才一样，凡是带<code>class=&quot;fa abc&quot;</code> 的图标都要重新定义成适配Landscape的。</li><li><p>语法<br>改成 <code>localsearch.ejs</code> 之后，这个脚本里面的两类语法要改。 一是if..else..要这样用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.local_search.enable)&#123; %&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>二是config要这样调用（注意有个等号）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var search_path = &quot;&lt;%= config.search.path %&gt;&quot; ;</span><br></pre></td></tr></table></figure><p>大概一共三四处要改，主要是config能读到就可以了。</p></li><li><p>搜索框的位置<br>这个脚本里面有一处容易坑的地方，就是这一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.popup&apos;).detach().appendTo(&apos;.header-inner&apos;);</span><br></pre></td></tr></table></figure><p>注意这个<code>.header-inner</code>是搜索框的位置，是要根据情况改的。比如我刚才在<code>header.ejs</code>定义的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;local-search-inner&quot;&gt;&lt;%- partial(&apos;search&apos;) %&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>那就要把<code>.header-inner</code> 改为 <code>.local-search-inner</code> 了。</p></li></ul><h3 id="放入渲染文件，取消阴影背景"><a href="#放入渲染文件，取消阴影背景" class="headerlink" title="放入渲染文件，取消阴影背景"></a>放入渲染文件，取消阴影背景</h3><p>渲染文件也是必须的，可以把 <a href="https://github.com/iissnan/hexo-theme-next/blob/master/source/css/_common/components/third-party/localsearch.styl" target="_blank" rel="noopener">localsearch.styl</a> 放入 <code>/source/css/_partial/</code><br>然后在主渲染文件<code>/source/css/style.styl</code>中，注意加上 <code>@import &quot;_partial/localsearch&quot;</code> 就可以了。 </p><p>不知道什么原因，这个搜索引擎的阴影背景<code>.local-search-pop-overlay</code> 总是会出现在最上方，导致搜索框出来之后根本点不到。我直接给它设置 <code>z-index: auto</code> ，跳过了这个问题。</p><p>这个文件是大部分元素的渲染文件，可以用来调整图标位置，placeholder文字的大小等等，这都是细节了。</p><h3 id="把原先的搜索功能关掉"><a href="#把原先的搜索功能关掉" class="headerlink" title="把原先的搜索功能关掉"></a>把原先的搜索功能关掉</h3><p>原先的搜索能在 <code>source/js/script.js</code> 里面，把这一段code移到 <code>localsearch.ejs</code> 里面，然后用一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!theme.local_search.enable)&#123; %&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>来控制就可以了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终搜索的效果截图在这里：<br><img src="/2018/06/15/HexoSearch/HexoSearch.jpg" alt="本地搜索的效果"><br>其实直接用 NexT 就好了，不过自己编辑主题可以趁机学习一下。毕竟还是成功了。<br>有一点很重要的是，自己编辑主题是免不了要debug的，要善用谷歌浏览器的检查功能（以及最简单的输出 <code>console.log()</code>，或者其他工具的同类功能）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 默认的 Landscape 主题其实已经很好了，可以说简明美观，网页上的元素也不难添加。&lt;br&gt;但是美中不足的就是用了谷歌搜索引擎，谷歌在国内打不开就不说了，而且用外部搜索引擎本来也不如站内搜索便捷实用。&lt;br&gt;后来我发现 NexT 主题是有站内搜索功能的，就试着把这个功能移植了进来。&lt;/p&gt;
&lt;h2 id=&quot;本地搜索的原理&quot;&gt;&lt;a href=&quot;#本地搜索的原理&quot; class=&quot;headerlink&quot; title=&quot;本地搜索的原理&quot;&gt;&lt;/a&gt;本地搜索的原理&lt;/h2&gt;&lt;p&gt;对于动态网站来说，本地搜索不是很困难，可以通过 php 实现（具体见&lt;a href=&quot;https://www.jianshu.com/p/2ff5e11e849c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;）。&lt;br&gt;但是，GitHub博客是静态网站，用不了 php，导致我最后只能把google搜索结果页内置到了网站里面 （Landscape也用了谷歌）。&lt;/p&gt;
&lt;p&gt;NexT 主题实现这个功能，用了 Hexo 的拓展包 &lt;code&gt;hexo-generator-searchdb&lt;/code&gt;，它预先生成了一个文本库&lt;code&gt;search.xml&lt;/code&gt;，然后传到了网站里面 。在本地搜索的时候，NexT直接用javascript调用了这个文件，从而实现了静态网站的本地搜索。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hans2936.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://hans2936.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 初步：在 GitHub Pages 搭建个人博客</title>
    <link href="https://hans2936.github.io/2018/06/06/HexoLog/"/>
    <id>https://hans2936.github.io/2018/06/06/HexoLog/</id>
    <published>2018-06-06T18:55:42.000Z</published>
    <updated>2018-06-20T01:31:56.871Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 Hexo 搭建了工作网站 <a href="https://cern.ch/shhan" target="_blank" rel="noopener">CERN:Shuo Han</a>，发现这个工具发文章就像是发朋友圈一样简单。虽然我以前用网页拼凑<a href="https://github.com/hans2936/Hans_Blog_Old" target="_blank" rel="noopener">我的老网站</a>花了很多时间，但我还是决定换了，写作和发布体验还是很重要的。<br>我的理解是，这是一个自动生成静态（html+css+js）网站的工具，主题里是很多模块化的网页，可以通过.yml配置文件运用这些模块，把MarkDown(.md)博客批量转化为网页并且跟主页形成总分结构。<br>下面是我用Hexo搭建个人网站的过程和网站配置：</p><p>首先，一切以<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo官网</a>为准。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>正常使用Github的电脑。</li><li>开了Github Pages的Repository。<br>如果不了解Github可以看<a href="https://www.jianshu.com/p/f82c76b90336" target="_blank" rel="noopener">这篇文章</a>。</li></ul><a id="more"></a><h3 id="在mac上配置Hexo文件夹"><a href="#在mac上配置Hexo文件夹" class="headerlink" title="在mac上配置Hexo文件夹"></a>在mac上配置Hexo文件夹</h3><p>安装 Node/Npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure></p><p>安装 Hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>这时博客就在本地生成了。访问<code>http://localhost:4000</code> 可以看效果。<br>可以说Hexo是很强大的，默认主题网站结构合理，适配手机，搜索栏（google）也有了。只需要优化（改一下失效的链接，添加评论，RSS等模块）就行了。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><code>hexo g</code> 生成/public 文件夹，里面是网站</li><li><code>hexo d</code> 把这个网站文件夹推送到服务器</li><li><code>hexo clean</code> 删除网站文件夹</li><li><code>hexo s</code> 本地查看效果</li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件是两个，第一个是根目录的 <code>_config.yml</code>。重要配置有</p><ul><li>language: zh-CN 是中文，不写是英文</li><li>url: <a href="https://hans2936.github.io">https://hans2936.github.io</a> （网站地址）</li><li>root: / (根目录在哪里，github就写斜杠，有些服务器会多一层路径)</li><li>skip_render: README.md 这样可以在 /source 里面放一个 README.md，推送的时候自动传到 Github 上面</li><li>theme: landscape 这里可以换主题</li></ul><p>推送设置 (GitHub)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/hans2936/hans2936.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>如果网站在服务器上，则可以用 rsync<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: rsync</span><br><span class="line">  host: 服务器名</span><br><span class="line">  user: 用户名</span><br><span class="line">  root: 放网站的文件夹</span><br><span class="line">  port: 22</span><br></pre></td></tr></table></figure></p><p>第二个配置文件，是主题的配置文件 <code>themes/landscape/_config.yml</code>，主要有导航栏(<code>menu</code>)，侧边栏(<code>widgets</code>)，网站图标(<code>favicon</code>)等。</p><h3 id="写新文章"><a href="#写新文章" class="headerlink" title="写新文章"></a>写新文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;article name&quot;</span><br></pre></td></tr></table></figure><p>这条命令会在<code>source/_posts</code>产生新文件，然后改改文件名，在进入编辑MarkDown就行了。</p><p>每篇文章最上面是配置区，能用到的主要是</p><ul><li>title: 题目</li><li>date: 日期 （会影响在主页的顺序）</li><li>tags: 标签</li><li>categories: 分类</li><li>updated: 修改日期</li></ul><p>配置区下面就随便写了。</p><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>会在 <code>source/about</code> 里面产生新文件，跟文章是一样编辑的。<br>然后再从主题配置的导航栏里面加上这一页。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  ...</span><br><span class="line">  关于: /about</span><br></pre></td></tr></table></figure></p><h3 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h3><p>执行 <code>npm install hexo-asset-image --save</code><br>然后，主配置文件 <code>_config.yml</code> 设置为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></p><p>这个时候创建新文章就会产生一个同名文件夹，把图片放入即可。<br>然后在文章正文这样引用放进去的图片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](文章名/图片名)</span><br></pre></td></tr></table></figure></p><h3 id="引用视频文件"><a href="#引用视频文件" class="headerlink" title="引用视频文件"></a>引用视频文件</h3><p>对某个链接中的视频文件，可以执行 <code>npm install hexo-tag-dplayer</code><br>这是一个播放器插件，使用时在文章中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=&quot;  &quot;pic=&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125;</span><br></pre></td></tr></table></figure></p><p>其中 <code>url</code> 是视频地址，<code>pic</code> 是缩略图地址。</p><h3 id="引入第三方视频"><a href="#引入第三方视频" class="headerlink" title="引入第三方视频"></a>引入第三方视频</h3><p>对视频网站上的视频，可使用 <code>iframe</code>，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;selfadapting-video&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>其中<code>class=&quot;selfadapting-video&quot;</code> 是一个自适应长宽比例的容器，具体看<a href="https://angeltime.cc/archives/685.html" target="_blank" rel="noopener">这篇博客</a>。</p><h3 id="创建侧边栏"><a href="#创建侧边栏" class="headerlink" title="创建侧边栏"></a>创建侧边栏</h3><p>比如在 <code>themes/landscape/layout/_widget/</code> 创建一个 about.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (site.tags.length)&#123; %&gt;</span><br><span class="line">  &lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;About&lt;/h3&gt;</span><br><span class="line">    &lt;div class=&quot;widget&quot;&gt;</span><br><span class="line">      E-mail: xyz@123.com</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>然后在主题配置的侧边栏中加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- ...</span><br><span class="line">- about</span><br></pre></td></tr></table></figure></p><h3 id="RSS-订阅"><a href="#RSS-订阅" class="headerlink" title="RSS 订阅"></a>RSS 订阅</h3><p>执行 <code>npm install hexo-generator-feed</code><br>然后在主配置文件 <code>_config.yml</code> 里面加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure></p><p>然后在主题配置文件里加上 <code>rss: /atom.xml</code>。</p><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>类似上一条，执行 <code>npm install hexo-generator-sitemap --save</code><br>主配置文件添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Sitemap </span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure></p><p>然后提交给 Google Search Console 就行了。</p><h3 id="高级修改"><a href="#高级修改" class="headerlink" title="高级修改"></a>高级修改</h3><p>Hexo的网页其实是被拆开成很多零件的，主要在<code>themes/landscape/layout/_partial/</code>，<br>比如对Gitment来说（关于Gitment见<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">此教程</a>），首先要打开 <code>head.ejs</code> 引用js, css文件（需放入<code>themes/landscape/source</code>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/gitment.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;/js/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后在 <code>article.ejs</code> 里面加上 Gitment 的code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">  &lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;gitment&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">      const gitment = new Gitment(&#123;</span><br><span class="line">        owner: &apos;username&apos;,</span><br><span class="line">        repo: &apos;username.github.io&apos;,</span><br><span class="line">        oauth: &#123;</span><br><span class="line">        client_id: &apos;---yourID---&apos;,</span><br><span class="line">        client_secret: &apos;---yourKey---&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      gitment.render(&apos;gitment&apos;)</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>就实现第三方功能了。</p><p>主题自带的功能也可以改，比如说分享功能可以在<code>themes/landscape/source/js/script.js</code>加一句，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&lt;a href=&quot;http://service.weibo.com/share/share.php?&amp;title=&apos; + encodedUrl + &apos;&quot; class=&quot;article-share-sina&quot; target=&quot;_blank&quot; title=&quot;微博&quot;&gt;&lt;/a&gt;&apos;</span><br></pre></td></tr></table></figure></p><p>然后找到<code>themes/landscape/source/css/_partial/article.styl</code> 比照着定义一个 <code>.article-share-sina</code> 就可以了。</p><p>另一个常用的修改是在 <code>themes/landscape/source/css</code> 的文件中定义新图标 (引用了FontAwesome)。比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#icon-search:before &#123;</span><br><span class="line">  font-family: FontAwesome;</span><br><span class="line">  content: &quot;\f002&quot;;</span><br><span class="line">  font-size: x-large</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是一个搜索图标，在网页模块中使用 <code>&lt;span id=&quot;icon-search&quot;&gt;&lt;/span&gt;</code> 就可以看到了。</p><p>像这种高级修改，对有一定网页知识的人来说有无限可能，自己做一个主题都是可以的。</p><h2 id="本站的Hexo设置"><a href="#本站的Hexo设置" class="headerlink" title="本站的Hexo设置"></a>本站的Hexo设置</h2><ul><li>默认主题 Landscape。</li><li>抬头图片位置<code>banner.jpg</code>：我家的猫。</li><li>评论系统为Gitment，需要引用<code>gitment.css</code>, <code>gitment.broser.js</code>， 并编辑 <code>article.ejs</code> 和 <code>head.ejs</code>。</li><li>分享按钮为自带按钮，包括Sina（改 <code>script.js</code> 和 <code>article.styl</code>）。</li><li>jquery.min.js 路径从google改为 <a href="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js" target="_blank" rel="noopener">https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js</a> (改 <code>after-footer.ejs</code>)。</li><li>从 NexT 主题移植而来的本地搜索引擎。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用 Hexo 搭建了工作网站 &lt;a href=&quot;https://cern.ch/shhan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CERN:Shuo Han&lt;/a&gt;，发现这个工具发文章就像是发朋友圈一样简单。虽然我以前用网页拼凑&lt;a href=&quot;https://github.com/hans2936/Hans_Blog_Old&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的老网站&lt;/a&gt;花了很多时间，但我还是决定换了，写作和发布体验还是很重要的。&lt;br&gt;我的理解是，这是一个自动生成静态（html+css+js）网站的工具，主题里是很多模块化的网页，可以通过.yml配置文件运用这些模块，把MarkDown(.md)博客批量转化为网页并且跟主页形成总分结构。&lt;br&gt;下面是我用Hexo搭建个人网站的过程和网站配置：&lt;/p&gt;
&lt;p&gt;首先，一切以&lt;a href=&quot;https://hexo.io/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo官网&lt;/a&gt;为准。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;正常使用Github的电脑。&lt;/li&gt;
&lt;li&gt;开了Github Pages的Repository。&lt;br&gt;如果不了解Github可以看&lt;a href=&quot;https://www.jianshu.com/p/f82c76b90336&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hans2936.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://hans2936.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
