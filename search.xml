<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[欧洲行]]></title>
    <url>%2F2018%2F06%2F19%2FEuroTrip%2F</url>
    <content type="text"><![CDATA[慕尼黑-汉堡-巴黎-柏林四月-五月春游，开心。视频：(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://hans-blog-video.oss-cn-beijing.aliyuncs.com/%E6%AC%A7%E6%B4%B2%E8%A1%8C%28%E7%A7%92%E6%8B%8D%29.mp4","pic":"https://hans2936.github.io/2018/06/19/EuroTrip/Hohenschwangau.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() （出现视频长度后）点击加载]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages(四)：Hexo进阶-NexT本地搜索引擎的移植]]></title>
    <url>%2F2018%2F06%2F15%2FHexoSearch%2F</url>
    <content type="text"><![CDATA[Hexo 默认的 Landscape 主题其实已经很好了，可以说简明美观，网页上的元素也不难添加。但是美中不足的就是用了谷歌搜索引擎，谷歌在国内打不开就不说了，而且用外部搜索引擎本来也不如站内搜索便捷实用。后来我发现 NexT 主题是有站内搜索功能的，就试着把这个功能移植了进来。 本地搜索的原理对于动态网站来说，可以通过 php 实现（具体见Github Pages(二)：个人网站的功能插件）。但是，GitHub博客是静态网站，用不了 php，导致我在老网站只能把google搜索结果页内置到了网站里面 （Landscape也用了谷歌）。 NexT 主题实现这个功能，用了 Hexo 的拓展包 hexo-generator-searchdb，它预先生成了一个文本库search.xml，然后传到了网站里面 。在本地搜索的时候，NexT直接用javascript调用了这个文件，从而实现了静态网站的本地搜索。 准备工作首先把产生文本库的包安装好，执行 npm install hexo-generator-searchdb --save。然后在主配置文件 _config.yml里面加上12345search: path: search.xml field: post format: html limit: 10000 并且在主题配置文件加上1234local_search: enable: true trigger: auto top_n_per_article: 1 其中trigger表示搜索结果会不会打字时自动显示，top_n_per_article 表示每篇文章最多显示几条结果（-1为不限数字）。这些只是准备工作，在把代码放到Landscape 之前，这些设置不会起任何作用。 NexT 主题的本地搜索代码NexT 主题的 local-search 主要是下面几个模块组成的： 核心javascript脚本：localsearch.swig css配置文件：localsearch.styl 搜索框：另一个localsearch.swig 在header中添加链接：header.swig Landscape主题的后缀有所不同（不是.swig， 而是.ejs），这几个文件copy过来之后需要稍微改一下语法，几个图标也需要重新定义，细节如下。 移植步骤定义”搜索”，”关闭”，”无结果”等图标NexT 大量使用了 &lt;i class = &quot;fa abc&quot;&gt; &lt;/i&gt; 这样的方式来引用 FontAwesome 图标，但是 Landscape 却不支持这么用。所以一开始不得不定义一些图标，在主题文件夹 themes/landscape/ 的 /source/css/ 下面找个地方 （比如说_partial/header.styl），定义：12345#icon-close:before &#123; font-family: FontAwesome; content: &quot;\f146&quot;; font-size: x-large&#125; 这样就定义了一个关闭搜索框的图标。移植的时候重新定义图标为&lt;span id=&quot;icon-close&quot;&gt;&lt;/span&gt; 就可以了。新定义的图标主要是搜索 \f002，关闭\f146，和无结果 \f119。 放入调出搜索框的链接首先进入主题文件夹的/layout/_partial/header.ejs ，那里默认有一个搜索链接（id=&quot;nav-search-btn&quot; class=&quot;nav-icon&quot;）。把这个链接扩展为：12&lt;% if(!theme.local_search.enable) &#123; %&gt;&lt;a id=&quot;nav-search-btn&quot; class=&quot;nav-icon&quot; title=&quot;&lt;%= __(&apos;search&apos;) %&gt;&quot;&gt;&lt;/a&gt;&lt;% &#125; %&gt;&lt;% if(theme.local_search.enable) &#123; %&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;popup-trigger nav-icon&quot; id=&quot;nav-search-btn&quot;&gt;&lt;/a&gt;&lt;% &#125; %&gt; 这也就意味着用主题配置中的 local_search.enable 来控制搜索功能了，打开本地搜索的情况下，搜索链接会启动class=&quot;popup-trigger&quot;，也就打开了本地搜索引擎。 放入搜索框还是着刚才的文件header.ejs，可以在最后一行&lt;/header&gt;前面加上1&lt;% if(theme.local_search.enable) &#123; %&gt;&lt;div class=&quot;local-search-inner&quot;&gt;&lt;%- partial(&apos;search&apos;) %&gt;&lt;/div&gt;&lt;% &#125; %&gt; 其中 &lt;%- partial(&#39;search&#39;) %&gt; 指向了 search.ejs，这个文件也就是 NexT 的搜索框另一个localsearch.swig了。把它拷贝成search.ejs 跟 header.ejs 放在一起，但是图标要全部换成适配Landscape的定义。另外直接明码写上placeholder=&quot; 本地搜索...&quot; 就可以了。 放入核心 javascript把localsearch.swig放入/layout/_partial/, 并且命名为localsearch.ejs。然后在/layout/layout.ejs的最后，&lt;/body&gt; 的上一行引用这个文件 &lt;%- partial(&#39;_partial/localsearch&#39;) %&gt;。这个目的是在每一个网页的最下方加入这一段 javascript。 然后就要改这个文件了， 要改的有三项： 图标跟刚才一样，凡是带class=&quot;fa abc&quot; 的图标都要重新定义成适配Landscape的。 语法改成 localsearch.ejs 之后，这个脚本里面的两类语法要改。 一是if..else..要这样用： 1&lt;% if (theme.local_search.enable)&#123; %&gt;&lt;% &#125; %&gt; 二是config要这样调用（注意有个等号）： 1var search_path = &quot;&lt;%= config.search.path %&gt;&quot; ; 大概一共三四处要改，主要是config能读到就可以了。 搜索框的位置这个脚本里面有一处容易坑的地方，就是这一行 1$(&apos;.popup&apos;).detach().appendTo(&apos;.header-inner&apos;); 注意这个.header-inner是搜索框的位置，是要根据情况改的。比如我刚才在header.ejs定义的是 1&lt;div class=&quot;local-search-inner&quot;&gt;&lt;%- partial(&apos;search&apos;) %&gt;&lt;/div&gt; 那就要把.header-inner 改为 .local-search-inner 了。 放入渲染文件，取消阴影背景渲染文件也是必须的，可以把 localsearch.styl 放入 /source/css/_partial/然后在主渲染文件/source/css/style.styl中，注意加上 @import &quot;_partial/localsearch&quot; 就可以了。 不知道什么原因，这个搜索引擎的阴影背景.local-search-pop-overlay 总是会出现在最上方，导致搜索框出来之后根本点不到。我直接给它设置 z-index: auto ，跳过了这个问题。 这个文件是大部分元素的渲染文件，可以用来调整图标位置，placeholder文字的大小等等，这都是细节了。 把原先的搜索功能关掉原先的搜索能在 source/js/script.js 里面，把这一段code移到 localsearch.ejs 里面，然后用一个1&lt;% if (!theme.local_search.enable)&#123; %&gt;&lt;% &#125; %&gt; 来控制就可以了。 总结最终搜索的效果截图在这里：其实直接用 NexT 就好了，不过自己编辑主题可以趁机学习一下。毕竟还是成功了。有一点很重要的是，自己编辑主题是免不了要debug的，要善用谷歌浏览器的检查功能（以及最简单的输出 console.log()，或者其他工具的同类功能）。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages(三)：使用Hexo博客生成工具]]></title>
    <url>%2F2018%2F06%2F06%2FHexoLog%2F</url>
    <content type="text"><![CDATA[最近用 Hexo 搭建了工作网站 CERN:Shuo Han，发现这个工具发文章就像是发朋友圈一样简单。虽然我以前用网页拼凑我的老网站花了很多时间，但我还是决定换了，写作和发布体验还是很重要的。我的理解是，这是一个自动生成静态（html+css+js）网站的工具，主题里是很多模块化的网页，可以通过.yml配置文件运用这些模块，把MarkDown(.md)博客批量转化为网页并且跟主页形成总分结构。下面是我用Hexo搭建个人网站的过程和网站配置： 首先，一切以Hexo官网为准。 准备工作 正常使用Github的电脑。 开了Github Pages的Repository。如果不了解Github可以看Github Pages(一)：一个最基础的个人网站。 配置Hexo文件夹在mac上安装 Node/Npm12brew updatebrew install node （windows/linux用户参见此官方教程） 安装 Hexo12345npm install hexo -ghexo init blogcd blognpm installhexo s 这时博客就在本地生成了。访问http://localhost:4000 可以看效果。可以说Hexo是很强大的，默认主题网站结构合理，适配手机，搜索栏（google）也有了。只需要优化（改一下失效的链接，添加评论，RSS等模块）就行了。 基本操作 hexo g 生成/public 文件夹，里面是网站 hexo d 把这个网站文件夹推送到服务器 hexo clean 删除网站文件夹 hexo s 本地查看效果 配置文件配置文件是两个，第一个是根目录的 _config.yml。重要配置有 language: zh-CN 是中文，不写是英文 url: https://hans2936.github.io （网站地址） root: / (根目录在哪里，github就写斜杠，有些服务器会多一层路径) skip_render: README.md 这样可以在 /source 里面放一个 README.md，推送的时候自动传到 Github 上面 theme: landscape 这里可以换主题 推送设置 (GitHub)1234deploy: type: git repository: https://github.com/hans2936/hans2936.github.io.git branch: master 如果网站在服务器上，则可以用 rsync123456deploy: type: rsync host: 服务器名 user: 用户名 root: 放网站的文件夹 port: 22 第二个配置文件，是主题的配置文件 themes/landscape/_config.yml，主要有导航栏(menu)，侧边栏(widgets)，网站图标(favicon)等。 写新文章1hexo new &quot;article name&quot; 这条命令会在source/_posts产生新文件，然后改改文件名，在进入编辑MarkDown就行了。 每篇文章最上面是配置区，能用到的主要是 title: 题目 date: 日期 （会影响在主页的顺序） tags: 标签 categories: 分类 updated: 修改日期 配置区下面就随便写了。值得一提的是，文章正文是支持html语言的，这样特殊字体和元素就可以直接加进去。 创建页面1hexo new page about 会在 source/about 里面产生新文件，跟文章是一样编辑的。然后再从主题配置的导航栏里面加上这一页。123menu: ... 关于: /about 引用图片执行 npm install hexo-asset-image --save然后，主配置文件 _config.yml 设置为1post_asset_folder: true 这个时候创建新文章就会产生一个同名文件夹，把图片放入即可。然后在文章正文这样引用放进去的图片。1![图片描述](文章名/图片名) 引用视频文件对某个链接中的视频文件，可以执行 npm install hexo-tag-dplayer这是一个播放器插件，使用时在文章中加入：1&#123;% dplayer &quot;url=&quot; &quot;pic=&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; &quot;token=tokendemo&quot; %&#125; 其中 url 是视频地址，pic 是缩略图地址。 这个方法是引入视频的最佳方法，但是需要一个地方来存放这些文件（url）。Github只有1G太少了，可以考虑使用阿里云oss存储，淘宝账户就能开，还很便宜。 引入第三方视频对视频网站上的视频，可在Markdown文件中明码使用html语言 iframe，比如123&lt;div class=&quot;selfadapting-video&quot;&gt;&lt;iframe src=&quot;&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;&lt;/div&gt; 其中class=&quot;selfadapting-video&quot; 是一个自适应长宽比例的容器，具体看这篇博客。 创建侧边栏比如在 themes/landscape/layout/_widget/ 创建一个 about.ejs12345678&lt;% if (site.tags.length)&#123; %&gt; &lt;div class=&quot;widget-wrap&quot;&gt; &lt;h3 class=&quot;widget-title&quot;&gt;About&lt;/h3&gt; &lt;div class=&quot;widget&quot;&gt; E-mail: xyz@123.com &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; 然后在主题配置的侧边栏中加上：123widgets:- ...- about RSS 订阅执行 npm install hexo-generator-feed然后在主配置文件 _config.yml 里面加上123456plugin:- hexo-generator-feedfeed:type: atompath: atom.xmllimit: 20 然后在主题配置文件里加上 rss: /atom.xml。 站点地图类似上一条，执行 npm install hexo-generator-sitemap --save主配置文件添加：123# Sitemap sitemap: path: sitemap.xml 然后提交给 Google Search Console 就行了。 高级修改 (评论，分享)Hexo的网页其实是被拆开成很多零件的，主要在themes/landscape/layout/_partial/，当在网页中加入一个新的模块时，比如对评论系统Gitment来说（关于Gitment见此教程），首先要打开 head.ejs 引用js, css文件（需放入themes/landscape/source）12&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/gitment.css&quot;&gt;&lt;script src=&quot;/js/gitment.browser.js&quot;&gt;&lt;/script&gt; 然后在 article.ejs 里面加上 Gitment 的code1234567891011121314151617&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt; &lt;section id=&quot;comments&quot;&gt; &lt;div id=&quot;gitment&quot;&gt;&lt;/div&gt; &lt;script&gt; const gitment = new Gitment(&#123; id: &apos;&lt;%= post.date %&gt;&apos;, owner: &apos;username&apos;, repo: &apos;username.github.io&apos;, oauth: &#123; client_id: &apos;---yourID---&apos;, client_secret: &apos;---yourKey---&apos;, &#125;, &#125;) gitment.render(&apos;gitment&apos;) &lt;/script&gt; &lt;/section&gt;&lt;% &#125; %&gt; 就实现这个第三方功能了。注意 id: &#39;&lt;%= post.date %&gt;&#39; 这句话是为了修复网页路径过长不能显示评论的bug (在手机app内分享网页很容易出现长后缀)。 主题自带的功能也可以改，比如说分享功能可以在themes/landscape/source/js/script.js加一句，1&apos;&lt;a href=&quot;http://service.weibo.com/share/share.php?&amp;title=&apos; + encodedUrl + &apos;&quot; class=&quot;article-share-sina&quot; target=&quot;_blank&quot; title=&quot;微博&quot;&gt;&lt;/a&gt;&apos; 然后找到themes/landscape/source/css/_partial/article.styl 比照着定义一个 .article-share-sina 就可以了。 像这种高级修改，对有一定网页知识的人来说有无限可能，自己做一个主题都是可以的。 本站的Hexo设置 默认主题 Landscape。 抬头图片位置banner.jpg：我家的猫。 评论系统为Gitment，需要引用gitment.css, gitment.broser.js， 并编辑 article.ejs 和 head.ejs。 分享按钮为自带按钮，包括Sina（改 script.js 和 article.styl）。 jquery.min.js 路径从google改为 https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js (改 after-footer.ejs)。 从 NexT 主题移植而来的本地搜索引擎，见Github Pages(四)：Hexo进阶-NexT本地搜索引擎的移植。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages(二)：个人网站的功能插件]]></title>
    <url>%2F2017%2F10%2F22%2FPageLog%2F</url>
    <content type="text"><![CDATA[在Github Pages(一)：一个最基础的个人网站中，我们已经介绍了怎样用Github Pages做出一个网站框架，例如完全重复出 HTML5 UP 网站上的某个模版。在熟悉该模版之后，你就已经可以编写博客页(html)，并且链接到首页了。甚至可以有出色的排版与配图。 但对一个博客网站来说这样还不够，很多互动功能也是需要手动添加、单独理解的，包括评论框、搜索栏、点击量计数、分享按钮、网站导航、网页排版和图片滚动等。 这一篇文章是一个大合集，总结我曾经见到的个人网站互动功能，以及各个解决方案的优劣。 注意：虽然列出了这么多插件，但是这些只是技术储备，如果你是一个网站新手，建议先阅读Github Pages(三)：使用Hexo博客生成工具。 搜索功能搜索功能包括两部分，一是在站内快速找到某一篇博客，这个方便网站的使用；二是在站外的搜索引擎上可以查到你的博客，这个有助于网站的推广。然而我在选择搜索工具的时候发现静态网站是无法自己写站内引擎的，所以我的搜索功能就暂时借助第三方（谷歌）实现了。 注：这篇文章写的早，后来我在Github Pages(四)：Hexo进阶-NexT本地搜索引擎的移植搞定了站内搜索。 php站内搜索的失败尝试在站内搜索到某个文件，直接写一段PHP遍历本站文件是最靠谱的，所以我就搜到了一位大神写的code（月光软件文章）。但是这段code有两个函数（eregi和split）在PHP7 过期了。所以我修改了一下（使用preg_match和explode），成了这个文件search.php。使用的时候，只要在网页中调用这个search.php就可以了，比如说 123&lt;form method=&quot;GET&quot; action=&quot;search.php&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;keyword&quot; placeholder=&quot;PHP站内搜索&quot; /&gt;&lt;/form&gt; 这个搜索引擎目前的效果是简单的列出全部搜出来的文件链接，在这个效果上美化一下就可以了。 在测试PHP文件的时候，必须要打开本地Web服务，启动方法（Mac）参见本文的“网页编辑后的预览”一节。 不成功的原因是显然的，Github Pages是静态的，不能运行php程序。不过这段学习经历挺有意思。 谷歌自定义搜索引入谷歌自定义搜索有两个工作，一是建立一个自定义引擎（谷歌自定义搜索），二是给谷歌提供网站信息（Google Search Console）。点击谷歌自定义搜索，创建一个搜索引擎，然后在“外观”选项卡里就可以找到“保存并获取代码”按钮了。把这个代码加入你要显示结果的网页即可。谷歌自定义引擎的搜索框有点丑，十有八九跟你的主题不一样，好在这个引擎也支持分页显示。本站的搜索功能就是用分页的方式实现的：首先选择一个分页的引擎主题，然后单独建立一个Search.html，加入刚才说的自定义引擎代码，然后在其他网页需要加入搜索框的地方输入一个原生主题的搜索框。 123&lt;form method=&quot;Get&quot; action=&quot;blogs/Search.html&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;q&quot; id=&quot;s&quot; placeholder=&quot;站内Google&quot; /&gt;&lt;/form&gt; 这样每次搜索就会跳转到搜索结果页了。当然也可以用“弹出”的主题，把action直接放到本页，就可以有直接在本页显示结果的效果。给谷歌提供网站信息也是很重要的，这决定了谷歌搜索你网站时结果的质量。我首先在Google Search Console注册了一个账户，添加本站，然后在管理界面的“抓取”、“站点地图”添加了一个写着本站所有网页地址的sitemap.txt文件，这样谷歌就知道本站以及各个网页的位置了（只添加站点不提交地图也行，这关系到谷歌爬取网页的效率)。 这个解决方案可以得到在网站内显示谷歌搜索结果的效果。但是当我频繁修改网站的时候，谷歌的滞后是很明显的。 为了提高效果，还可以提交更多的信息给谷歌，包括一些关键词，这些我就没有深究了。 百度自定义搜索百度自定义搜索其实跟谷歌差不多，都包括自定义一个引擎加入网页（百度自定义搜索），和为百度提供网站信息（百度站长工具）两个步骤。这里就不赘述了。但是百度跟Github Pages的兼容性似乎是有问题的，百度抓取github.io的效率明显比谷歌低很多（搜索同样的Github Pages网页就知道了，而且我把本站提交给百度没有效果）。所以本站的第三方搜索引擎还是选择了谷歌。 评论功能评论功能是博客的重要互动功能，但是评论是动态的，Github Pages是静态的，需要借助一个第三方服务来实现。 新浪评论框的失败尝试在网上搜了一下之后，我最先想到的解决方案是微博开放平台，因为微博几乎谁都有，从演示的效果来看，评论功能使用微博评论箱，再结合微博分享、微博赞按钮两个插件，就跟在微博内部评论是一样的了（甚至还有微博秀这种直接展示微博个人页的功能），等于把个人博客和微博社区结合起来了。 作为官方插件，需要先申请一个Appkey。这件事有两个步骤，一是在微博开放平台申请一个账户，然后提交身份验证。二是在微博开放平台：网站接入接入你的网站，然后提交审核。Github Pages显然是境外网站，不需要提供备案信息，只要选择境外网站的验证，把域名查询（站长之家Whois查询）和ip查询（阿波罗ip查询）的结果放到一张图片上上传就行了。在网页中加入评论箱本身并不复杂，只要点击微博开放平台：评论箱，然后把底部代码加入网页就行了。其他插件也是一样的，本地预览可以很快看到效果。 然而，微博插件在Github Pages是不能正常使用的。一开始我并不知道原因，后来用Chrome浏览器打开网页的时候，发现这些插件实际上是被浏览器安全政策阻止了。这对个人网站来说肯定是不可接受的，因为你不能要求访问者为了访问你的网站而修改浏览器设置。进一步去查这些插件不安全的原因，就发现微博的插件是不支持https的，而现在Github Pages用的是https的域名。进入Github Pages库的设置，会发现这么一个无法更改的选项。 Enforce HTTPS— Required for your site because you are using the default domain (hans2936.github.io) 也就是说除非我自己买一个域名，否则这个选项是不能修改的。再说好像没必要为了一个评论系统把网站从https改成http，这个方案也就搁浅了。 来必力第二个方案是找一些专门提供评论服务的网站，我找到了现在比较流行的来必力。加入这个服务就比新浪评论箱简单多了。先注册一个账户，然后点击“体验”、“管理中心”，就可以看到代码了。这个服务的好处是可以用国内所有的社交网站登陆（QQ、微信、微博），而且界面也很好看。但是来必力有一个硬伤，就是加载速度太慢了。感觉博客前两段看完了这个插件还没加载出来，一开始我觉得无伤大雅，直到我发现这个评论框不加载完，本站的导航栏就弹不出来。这就有点影响体验了，所以这个方案也没使用。 Gitment最后我终于找了一个比较合适的评论系统：教程：Gitment。这个教程已经很详细了，唯一需要注意的是它跟search.php一样必须开本地Web服务器才能查看效果。这个评论系统是直接把Github issues搬到你自己的网页。它有三个好处，第一个就是把Github pages和Github issues联系起来，这样连评论带网站都在一个库里面；第二个好处是Gitment是一个出色的评论框，支持markdown语法，还自带点赞；第三个好处是加载速度快。唯一的坏处就是只能使用Github账户评论，不过我觉得可以接受，因为本来就是技术性博客，提高评论门槛也未必是坏事。所以这就是我网站的评论框解决方案了。 分享按钮分享也是博客网站重要的互动功能。在国内比较重要的就是支持微信和微博的分享，尤其是微信。本站的评论栏上面都有分享按钮，其中微信还可以扫码，这个功能来自于Github:share.js。这个Github文件夹的Readme有一个教程，不过我是把整个包下载下来，仔细看了一下demo网页，然后照搬到本站的。现在这个分享按钮并不是腾讯或新浪提供的原生插件，对微博、QQ来说是跳转到一个分享页，对微信来说是在微信中打开本网址，进而实现分享的。因为有微博评论箱的经验，我也就不强求原生插件了，这个效果还可以。 计数在博客列表统计评论数、点击数、赞数可以让访问者快速找到比较火的文章。也可以为进一步排序提供依据。统计也是动态的，要借助一个第三方服务。本站的博客都有一个点击量统计，这些数字是提供自网站:不蒜子的。教程链接为教程:不蒜子，非常简单，粘贴里面的代码进入网页即可。这个统计分本站点击，本站访问人次和本页点击。但是现在点击统计仅限于本页，没有传递到博客列表。另外，评论和赞的统计比点击数更有意义，Gitment应该可以做到但还没有官方的解决方案。这些以后再去开发吧。 网页设计使用Markdown编辑网页博客在写博客的时候，如果直接在html里面敲字体验并不好。因为要不断地敲一些&lt;p&gt;, &lt;a&gt;, &lt;li&gt; 这些格式的开头和结尾。虽然latex写习惯了之后这也没什么，但是个人博客还有更轻松的办法来写，就是用Markdown编辑器。Markdown语法是一个非常适合写日志的语法。我直接从App Store里面搜了一个编辑器，叫MWeb，还是很好用的。写完之后可以直接导出为html格式，然后取其中正文部分粘贴到博客网页即可。这个过程只需要注意检查图片、列表等特殊部分跟网站模板的兼容性就行了。 举例来说，Mweb支持数学公式的编辑和导出，这是用MathJax来实现的。MWeb在导出html时会自动转换格式，但此时要注意检查网页的引用： 12&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/x-mathjax-config&quot;&gt;MathJax.Hub.Config(&#123;TeX: &#123;equationNumbers: &#123; autoNumber: &quot;AMS&quot; &#125; &#125;&#125;);&lt;/script&gt; 更简单的就是使用Hexo等博客发布工具，这样省去了自己导出html，直接编辑好Markdown，再加一条hexo g命令就变成网页了。 网页编辑后的预览网页预览的方式有四种： 一，直接用浏览器打开html，这肯定是最快的。但是有些插件不能显示，比如不能测试上述的Gitment和search.php。但是大部分工作还是能胜任的。 二， 使用Adobe Dreamweaver这样的专业工具检查，我并没有开发太多功能，不过很重要的是检查网页的报错，以及批量查找/替换某个词句。 三， 打开本地Web服务器。这是能完美运行网站上所有插件，甚至可以测试动态模块的办法。具体步骤参见简书博客:Mac OS X Web Server。比较重要的命令就是apachectl： 12sudo apachectl startsudo apachectl stop 启动apachectl后，把你的网站文件夹拷贝到/Library/WebServer/Documents，然后打开http://127.0.0.1/网站文件夹就可以了，博客里面还写了一些高级功能，如怎样更改路径和配置等。 四，如果用了Hexo博客工具，一条hexo s命令就可以了。 图片滚动图片滚动插件这个功能对博客来说可有可无，不过对于普通网站来说，宣传新闻，推销产品什么的还是很有用的。我觉得很有意思就留在首页了，循环播放本站的日志，这应该是本站唯一一个没那么朴素的效果。本站的插件叫做Nivo Slider，用起来比较舒服，因为图片和图例是分开的，设置也很多。我试了好几个素材网站的插件都没有这个好。但是Nivo Slider有一个毛病是图片的尺寸最好都一样，而且不能太方正（我都是1920x960的图），否则电脑端还好，但在移动端会出现显示问题。 点击链接Github:Nivo Slider，下载并学习demo就可以把它加入你的网页了。 手机滑动的实现Nivo Slider本身是不支持手机的，找那两个小按钮实在比较麻烦。所以我找到了一位高人的博客 Will Rees。他在里面讲了怎样利用一段支持手机滑动指令的代码 Hammer.js实现Nivo Slider的左右滑动。用手机打开本站主页就可以看到效果了。不过因为我只是在Nivo Slider上面稍作修改，在手机上是只能左右滑动，不能手指悬停的。完美的解决方案可能是为手机单独找个插件。 回到顶部按钮在网页很长的时候，回到顶部按钮就很有用了。这个需要一段javascript code实现。我是在Google上随便找了一个，改了改图标和大小，也可以看文件back.js。确定按钮图片的位置对之后，引用一下就可以了。 关于、版权考虑到现在转载不署名的情况到处都是，在某个位置声明一下网站内容的版权也是有必要的。在网页中加入版权声明其实很简单，只要进入版权网页Creative Commons，在这一页最下方点击“将这个授权协议使用在您自己的作品中”就可以找到代码了，或者直接点这里的链接也行。 这个证书是一个署名-可修改-非商业用途证书，如果你需要其他政策，也可以去Google其他证书的名字，基本上第一个弹出来的就是这些Createive Commons协议了。 总结至此我总结完了学习过程中遇到的各种功能插件。我属于业余，很多细节还在学习中，相信会有更好的解决方案。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages(一)：一个最基础的个人网站]]></title>
    <url>%2F2017%2F10%2F21%2FPageBasic%2F</url>
    <content type="text"><![CDATA[一直想做个博客网站，去网上查了一下，最先查出来的是云服务器+WordPress，不过又要买服务器，又要买域名，还得备案。后来发现每个Github账户都可以开一个自己的静态网站（域名为 username.github.io），非常简单。静态网站的定义参见维基百科-网页设计，虽然方便，但是也有一些功能上的限制，最显著的特点就是不能运行php和asp，不能自动读写站内的文件。不过静态网页依然可以实现个人博客需要的所有功能，而我也只是学习一下做网页、博客什么的，这个方案已经是最好的了。 这篇博客介绍搭建一个基于html的网站框架的过程。 拥有并了解Github 账户第一步 注册没啥好说的，进入https://github.com，然后注册一个账户就可以了。 第二步 确保可以自由地创建/修改/下载/上传一个库（repository）网页是由很多html，css，js等文件组成的，对github pages来说，一个repository就是存放这些文件的文件夹，所以确保可以随心所欲的管理一个库是最基本的。 这里是第一个官方教程：GitHub:Hello world。可以通过按钮来理解一个库的构造和维护，不过这只能让你创建修改一个Readme文件。这里你会意识到每个库是可以创建分支(branch)的，实际操作中，如果对版本要求没那么严格（做个网页而已），你可以忽略branch的存在，只用master一个默认branch即可。 这个时候你已经可以用网页看到这么一个库了，到这一步你的库可能只有一个Readme： Github的关键就是可以用Git来控制（维基百科-Git），这是一个版本工具（我的理解是一个每次上传都备份一个版本，并且可以协调多人同时修改的公用网盘）。当在确定自己的终端可以使用 git --version 命令（Mac+Xcode自带），并且安装了SSH-Key 之后，你就可以使用如下的基本命令来控制你的库了： 12345git clone 你的SSH地址 （下载你的reposity，这个地址可以用网页浏览的Clone-or-Download-use SSH按钮看到，比如说git@github.com:uername/reposity.git）git pull （联系服务器，更新本地文件夹）git add --all （写入本地的所有新文件）git commit -am &quot;随便说点啥&quot; （在本地进行一次有记录地更新，包括本地所有文件的修改）git push origin master （把本地的更新推送到服务器） SSH-Key决定了你的电脑有没有权限进行这些操作，这里有另一个官方教程：GitHub:SSH，这个是必须一步步跟下来的，Mac的重要命令包括： 123ls -al ~/.ssh (查一下是不是已经有key了)ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; （产生一个key，不单独设密码的话一路回车就行）pbcopy &lt; ~/.ssh/id_rsa.pub （把你的key复制到粘贴板，不这么复制可能太长了复制不下来） Linux和Windows进入刚才的教程看就行，如下图，在点击“右上角头像”+“Settings”+“SSH and GPG Keys” 这里添加了你刚刚复制的public Key之后，你就有权限进行上述的Git操作了。 搭建Github Page网站第一步 创建一个Github Pages repositoryGitHub Pages repository跟普通的repository是一样的，唯一的区别就是他的名字必须叫做username.gihub.io。这个官方教程 GitHub Pages 写的十分好懂，按这个做完之后你就有了一个你的网址 username.github.io，里面有一句 Hello World！ 第二步 最基础的网站框架现在离一个好网站只差一步了，就是把某个好网站的所有文件拷贝到你的文件夹里面。GitHub官方建议你使用博客生成工具 Jekyll 。GitHub在库的设置里面还提供Jekyll主题选择。而我的博客使用了Hexo生成工具，具体见我的博客Github Pages(三)：使用Hexo博客生成工具。强烈推荐使用网站工具，这样可以直接用markdown格式编辑文章，而且使用简单的命令实现预览，生成和发布，从而节省大量的时间。 我一开始并不了解博客工具，所以去了一个模版网站 HTML5 UP，然后下载了其中一个模版，直接在本地打开 index.html，就看到了网站预览，如图： 然后我再手动git add 所有的文件到我的网站中。当你git push之后，你的域名就会变成这样一个网站了。这也就是一个最基础的网站了。不用博客工具的好处是有利于学习网页知识，当博客不多的时候，对习惯使用bash+vim的人来说，这样编辑网站是可以接受的。坏处是写一个博客就多一个html，如果有比如超过50篇博客，每篇博客的公共部分就很麻烦了。 第三步 开始发挥吧不管是使用博客工具，还是直接手动添加html，都离不开对 html/css/JavaScript的基本理解。比如上述简单的网站模版，很多按钮，搜索框等都是空的，需要简单的填充。而即使用了博客工具，想要添加“关于”，或者侧边栏等各种元素，也是需要运用网页语言的。下面就是自由发挥了，继续进入Github Pages(三)：使用Hexo博客生成工具使用博客生成工具，并且到Github Pages(二):个人网站的功能插件寻找想要使用的插件吧。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[游牧]]></title>
    <url>%2F2015%2F07%2F16%2FYouMu%2F</url>
    <content type="text"><![CDATA[如果生来是个牧民，我就会生得身强力壮。 在马群中奔驰呼号， 赶去市场与人通商。 夜晚可以望向天空， 写下星星月亮的故事。 我能看清天边的来客， 极能饮酒，善于歌唱。 我就能追逐水草与甘泉， 没有可以牵绊的家乡， 一世繁华皆随我去， 带上我的好好姑娘。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忘]]></title>
    <url>%2F2014%2F03%2F28%2FWang%2F</url>
    <content type="text"><![CDATA[许三多说，好好活就是做有意义的事。的确，人生是需要有意义的。人生有了意义，就不会“因虚度年华而悔恨，因碌碌无为而羞愧”。所以我们找各种各样的标准，做各种各样的努力。虽然眼界有高低之分，但是人们大多要实现目标，当一个所谓“人生赢家”。 一年半之前，我从威海游览而回，心智颇通，也思考了人生的意义，我写道：“如云雾中的小水珠，却反射着真理的光”。 于是暂得于己，快然自足。不管看什么东西，心里都会有一个尺度，看看它会让我离成功更近还是更远。 然而在这个逻辑之外，还有一个更大的问题：人是客观的，还是主观的呢？是有意义重要，还是知道自己有意义重要呢？ 苏格拉底早就言明，万事万物皆有因果；而凡是有因果的地方，都有进行分析的余地。分析之后，便是智慧，热爱智慧，便是哲学（philos—sophia）。可见“反射真理的光”，并不是世界上最难的事情。然而景行行止之余，还有一个更重要的问题：就算真的有意义如圣人先知，垂暮之时，又能不能获得彻底的满足呢？ 恐怕不会。 老子曰：“人皆知美之为美，斯恶已。”客观意义可以找到标准，可主观满足永远是相对而言。如果一个人的审美超前于时代，他看什么都不会美；一个人笑点超前于时代，他看什么都不会笑。从这个角度来说，我们苦苦追求，竟然是缘木求鱼。知道的越多，越不会快乐，孔子哭曰：“胡为乎来哉！” 当然，一个人得不到喜与乐，并不妨碍一个人的成就。孔子虽然悲伤，依然是万世师表；而苏格拉底之死，更成就了他的伟大。可是，想了一辈子，追了一辈子，却不能获得最终的满足，就算没有“凤鸟不至，河不出图”的叹息，也逃不出“天高地迥，兴尽悲来”的宿命，这不是有些不完美吗？ 彼其于世，未数数然也。 群英会上，周公瑾醉酒舞剑，歌曰： “丈夫处世兮立功名；立功名兮慰平生。慰平生兮吾将醉；吾将醉兮发狂吟！” 可见一个人的一生，对于人类可能自有用处，而对他自己来说，成就了什么，悟到了什么，不过是告慰平生。 在美人迟暮之时，有一壶浊酒，古今多少事，都付笑谈中，如是而已。 虽然，彼于致福者，未数数然也。 《人间词话》论词的境界，说“有有我之境，有无我之境”，而“境界有大小，不以是而分高下”。人是客观的，也是主观的。既要追寻自然，把自己成就在“人生忘我的一刹那”；更要满足自己，找一个良辰吉日，不但不要忘我，还要忘记除我之外的一切，忘记一切前因与后果，来纵容自己幼稚的心。 唯有感情不可计算，算出来的已不是感情。而“输”与“赢”的区别，不过是“一优美，一宏壮也”。 终于又想起希腊人的三问，我是谁？从哪儿来？到哪儿去？我想，假如你要的只是快乐，那就不要知道答案。 老子所谓“功成身遂”，王国维所谓“主观之诗人”。我想世界上最美好的人生，就是倾注才华上下求索，再把这一切统统忘记。 本来无一物，何处惹尘埃。 注：大学快毕业时写的。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忆威海]]></title>
    <url>%2F2014%2F01%2F18%2FYiWeiHai%2F</url>
    <content type="text"><![CDATA[东行千里，以观海疆雪后天晴，海风激凉 登高望远在环翠楼顶 又亲涉海滩，静对白浪 身后的一切变得黑暗 大海上闪耀着午后的光 看那货轮常满载而回 想视野之外，必有宝藏 注1：环翠楼为古威海卫塔楼，视野极好，有明代赵鹤龄《登环翠楼七言排律碑》“区区倭种而今遁，赫赫神威自昔宣”]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人如明镜]]></title>
    <url>%2F2012%2F07%2F20%2FRenRuMingJing%2F</url>
    <content type="text"><![CDATA[回家这些日，发现故乡没什么变化，而这一年发生了多少事，人一辈子的变化又何其多呢？希腊人问道：“我是谁？从哪里来？到哪里去？”但是看到《赤壁赋》里形容人的渺小，好比“寄蜉蝣于天地，渺沧海之一粟”。我们就知道这三问是多么令人悲伤了。 人都是要死的，而且死得很快，“修短随化，终期于尽”。在有限的人生里，人追求功名利禄，追求幸福快乐，追求真理，追求艺术，但是“一朝春尽红颜老，花谢人亡两不知”，不管人追求了什么，不管这个追求高尚还是低俗，人一旦死了，追到的东西也就看不见了。孙悟空道：“似这般可得长生么？不能？不学！”岂不痛哉！ 于是“在逃去如飞的日子里，在千门万户的世界里”，人们惘然而追问，我是谁？我在哪？我为什么出现？我来这里做什么呢？ 思考这个问题的人不计其数，法国人帕斯卡尔如是说： 人只不过是一根芦苇，是自然界最脆弱的东西，但他是一根能思想的芦苇，用不着整个宇宙都拿起武器来毁灭他，一口气，一滴水，就足以致他死命了。然而…他知道自己要死亡，知道宇宙对他的优势，而宇宙对此却一无所知。因此，我们的全部尊严就在于思想。正是由于它而不是由于我们所无法填充的空间和时间，我们才必须提高自己。 虽然人与自然从来不是敌人，大自然也不想“致人死命”；但是这句话抓住了人最大的特点，说白了，就是会说话，会思考，能大自然所不能，所以自有他的用处。大自然需要人来替她表达，而人又渴望拥有自己的价值。于是石涛说“山川使予代山川立言也。”有了这层关系，大自然是活着的大自然，人是有意义的人。大家就各取所需，两全其美了。董其昌总结道：“诗以山川为境，山川亦以诗为境。”此言得之。 所以最有用的人，是亲近自然的人。而我们总是亲近我们自己。我们过于亲近自己，就会喜怒无常，心有挂碍。曾国藩说“一身之屈伸，一家之饥饱，君子固不暇忧及此也。”这并非不暇，而是不智。如果少年好色，中年好斗，老年好得，人就没了灵气，时间就要白白流逝。只有一双发现美的慧眼和不随波逐流的高格，才是每个人最大的宝贝。 佛家说，身似菩提树，心如明镜台。人要像明镜一样，才能把握住人生。我们把自己变成明镜照这大千世界，还得志向高远，眼界开阔。时时勤拂拭，莫使惹尘埃。 这也就引出来宗白华的一段话： 艺术心灵的诞生，在人生忘我的一刹那，即美学上所谓“静照”。静照的起点在于空诸一切，心无挂碍，和世务暂时绝缘。这时一点觉心，静观万象，万象如在镜中，光明莹洁，而各得其所，呈现着它们各自的充实的、内在的、自由的生命，所谓万物静观皆自得。 当我们静观万象而忘我的时候，就好像宇宙的镜子一样，喻无尽于有限，创造出映射真理的艺术形象、追问真理的哲学命题、或是描述真理的科学公式来。从这个角度说，菩提本无树，明镜亦非台，关键是树能“静”，镜能“照”，“静照”而“自得”也。如果“得”而传于后世，还有谁能说你渺小呢？ 英国人布莱克写诗说： 一沙一世界，一花一天国，君掌盛无边，刹那含永劫。 人来自大地，归于尘土，倏忽而逝，却足以给永恒一个象征，就像云雾中的小水珠，却反射着真理的光。 歌德说： 在璀璨的反光里，我们把握到生命。 于是绳命，就变的回晃而井猜了。 注1：大学时代某个学期的寒假，在去威海的火车上读了宗白华的《美学散步》所写。注2：布莱克的诗名为《To see a world in a grain of sand》，翻译自《美学散步》。注3：歌德的话翻译自《美学散步》，后人多引用，相信这句话存在，但我却一时找不到原文（德语不行）。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[游大明湖畔随笔]]></title>
    <url>%2F2011%2F07%2F16%2FDaMingHu%2F</url>
    <content type="text"><![CDATA[落日垂柳岸，雨后大明湖游人采莲色，画舫追湖风 荡漾六七倾，亭阁十几重 诗社今犹在，质朴是民风 济南名士多，历下有半城 注1：大明湖曾有王士祯“秋柳诗社”，现在为纪念馆 注2：杜甫游大明湖，有《陪李北海宴历下亭》“海右此亭古，济南名士多” 注3：大明湖位于历下区，湖内有“历下亭”，有名景“历下秋风” 注4：大明湖有刘凤诰楹联“四面荷花三面柳，一城山色半城湖”]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗文</tag>
      </tags>
  </entry>
</search>
